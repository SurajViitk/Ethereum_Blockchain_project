{"ast":null,"code":"import _regeneratorRuntime from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/src/App.js\";\nimport React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      transactionHash: '',\n      txReceipt: '',\n      add_rec: ''\n    };\n\n    _this.recipientChange = function (event) {\n      _this.setState({\n        add_rec: event.target.value\n      });\n    };\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer-using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              });\n\n              _context2.next = 5;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                _context3.next = 6;\n                return storehash.options.address;\n\n              case 6:\n                ethAddress = _context3.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n\n\n                _context3.next = 10;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  }); //var add_rec= $('#add_rec').val();\n                  // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n                  //return the transaction hash from the ethereum contract\n\n\n                  storehash.methods.issue_cert(_this.state.add_rec, _this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  });\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.show_cert_2 =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                storehash.methods.issuee_cert_cnt(accounts[0]).call({\n                  from: accounts[0]\n                }, function (error, result) {\n                  console.log(result);\n                }); // }).then(function(count){\n                //   var cert_table = $('#cert_table'); \n                //   cert_table.empty(); \n                //   cert_table.append(\"<tr><th>Recipient Address</th><th> Certificate Hash</th></tr>\");\n                //   for(var i=0;i<count;i++){\n                //     certificate_instance.get_cert_issuee(i).then(function(issuee_data){\n                //       var address = issuee_data[0];\n                //       var hash = issuee_data[1]; \n                //       var temp = \"<tr><td>\"+address+\"</td><td>\"+hash+\"</td></tr>\";\n                //       cert_table.append(temp);\n                //     });\n                //   }\n                // });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Ethereum and IPFS using Infura\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"grid\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"recipient address:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"add_rec\",\n        onChange: this.recipientChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Send it\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \" Get Transaction Receipt \"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        bordered: true,\n        responsive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \" \"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Values\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"IPFS Hash stored on Ethereum\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.state.ipfsHash)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, this.state.ethAddress)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Tx # \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.state.transactionHash)))))) // <h1>Recipient</h1>\n      // <hr/>\n      // <br/>\n      // <p id=\"accountAddress\"></p><br/>  \n      // <div id=\"content\">\n      //   <form onSubmit=\"App.show_notification(); return false;\">\n      //     <input type = \"submit\" value=\"Show Notifications\"/>\n      //     <table class=\"table\" id=\"notify_table\">\n      //     </table> \n      //   </form>\n      //   <form onSubmit=\"App.show_cert_2(); return false;\">\n      //     <input type = \"submit\" value=\"Show your Certificate\"/>\n      //     <table class=\"table\" id=\"cert_table\">\n      //     </table> \n      //   </form>\n      // </div>\n      ;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/surajv/Documents/Blockchain prjct/doc_verify-master/src/App.js"],"names":["React","Component","web3","ipfs","storehash","Button","App","state","ipfsHash","buffer","ethAddress","transactionHash","txReceipt","add_rec","recipientChange","event","setState","target","value","captureFile","stopPropagation","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","onClick","blockNumber","gasUsed","eth","getTransactionReceipt","err","console","log","onSubmit","getAccounts","accounts","options","address","add","hash","methods","issue_cert","send","error","show_cert_2","issuee_cert_cnt","call"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n\nstate = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      transactionHash:'',\n      txReceipt: '',\n      add_rec:''\n    };\n\nrecipientChange = (event) => {\n  this.setState({add_rec: event.target.value});\n}\n\n//Take file input from user\ncaptureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n\n//Convert the file to buffer to store on IPFS\n convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer-using es6 syntax\n        this.setState({buffer});\n    };\n\n//ES6 async function\nonClick = async () => {\ntry{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\nawait web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        });\n      }\ncatch(error){\n      console.log(error);\n    }\n}\n\nonSubmit = async (event) => {\n      event.preventDefault();\n\n//bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n    //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n    //save document to IPFS,return its hash#, and set hash# to state\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash\n        this.setState({ ipfsHash:ipfsHash[0].hash });\n        //var add_rec= $('#add_rec').val();\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n        //return the transaction hash from the ethereum contract\n        storehash.methods.issue_cert(this.state.add_rec,this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        });\n      })\n    };\n\n    show_cert_2 = async (event) => {\n      //  App.contracts.Certificate.deployed().then(function(instance) {\n      // certificate_instance = instance;\n      // return instance.issuee_cert_cnt(App.account,{from:App.account});\n      const accounts = await web3.eth.getAccounts();\n      storehash.methods.issuee_cert_cnt(accounts[0]).call({from: accounts[0]},(error, result) => {\n        console.log(result);\n      });\n    // }).then(function(count){\n    //   var cert_table = $('#cert_table'); \n    //   cert_table.empty(); \n    //   cert_table.append(\"<tr><th>Recipient Address</th><th> Certificate Hash</th></tr>\");\n    //   for(var i=0;i<count;i++){\n    //     certificate_instance.get_cert_issuee(i).then(function(issuee_data){\n    //       var address = issuee_data[0];\n    //       var hash = issuee_data[1]; \n    //       var temp = \"<tr><td>\"+address+\"</td><td>\"+hash+\"</td></tr>\";\n    //       cert_table.append(temp);\n    //     });\n    //   }\n    // });\n  };\n\nrender() {\n\nreturn (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Ethereum and IPFS using Infura</h1>\n          </header>\n\n<hr/>\n<grid>\n          <h3> Choose file to send to IPFS </h3>\n          <form onSubmit={this.onSubmit}>\n          <label>recipient address:\n            <input\n              type = \"text\" id=\"add_rec\" onChange = {this.recipientChange}\n            />\n            </label>\n            <br></br>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Send it\n             </Button>\n          </form>\n<hr/>\n <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n <hr/>\n  <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th> </th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n<tbody>\n                  <tr>\n                    <td>IPFS Hash stored on Ethereum</td>\n                    <td> : </td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td> : </td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>Tx # </td>\n                    <td> : </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n          // <h1>Recipient</h1>\n          // <hr/>\n          // <br/>\n          // <p id=\"accountAddress\"></p><br/>  \n          // <div id=\"content\">\n          //   <form onSubmit=\"App.show_notification(); return false;\">\n          //     <input type = \"submit\" value=\"Show Notifications\"/>\n          //     <table class=\"table\" id=\"notify_table\">\n                \n          //     </table> \n          //   </form>\n          //   <form onSubmit=\"App.show_cert_2(); return false;\">\n          //     <input type = \"submit\" value=\"Show your Certificate\"/>\n          //     <table class=\"table\" id=\"cert_table\">\n                \n          //     </table> \n          //   </form>\n\n            \n          // </div>\n      );\n    }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}