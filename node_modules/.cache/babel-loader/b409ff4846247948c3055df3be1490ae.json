{"ast":null,"code":"import _regeneratorRuntime from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/surajv/Documents/Blockchain prjct/doc_verify-master/src/App.js\";\nimport React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      transactionHash: '',\n      txReceipt: '',\n      add_rec: '',\n      issuee_data_1: [],\n      issuee_data_2: [],\n      cert_hash: '',\n      str1: '',\n      str2: ''\n    };\n\n    _this.recipientChange = function (event) {\n      _this.setState({\n        add_rec: event.target.value\n      });\n    };\n\n    _this.hashChange = function (event) {\n      _this.setState({\n        cert_hash: event.target.value\n      });\n    };\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer-using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              });\n\n              _context2.next = 5;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                _context3.next = 6;\n                return storehash.options.address;\n\n              case 6:\n                ethAddress = _context3.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n\n\n                _context3.next = 10;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  }); //var add_rec= $('#add_rec').val();\n                  // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n                  //return the transaction hash from the ethereum contract\n\n\n                  storehash.methods.issue_cert(_this.state.add_rec, _this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  });\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.show_cert_2 =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                storehash.methods.issuee_cert_cnt(accounts[0]).call({\n                  from: accounts[0]\n                }, function (error, result) {\n                  var len = parseInt(result);\n\n                  for (var i = 0; i < len; i++) {\n                    var i_data1 = [];\n                    var i_data2 = [];\n                    storehash.methods.get_cert_issuee(i).call({\n                      from: accounts[0]\n                    }, function (error, ans) {\n                      i_data1.push(ans[0]);\n                      i_data2.push(ans[1]);\n                      var cert_table = _this.refs.cert_table_1;\n                      cert_table.append(\" \" + ans[0] + \" \" + ans[1] + \"   link:gateway.ipfs.io/ipfs/\" + ans[1] + \":\"); // console.log(i_data1[0]);\n                      // console.log(i_data2[0]);\n                    }); // console.log(i_data1);\n\n                    _this.setState({\n                      issuee_data_1: i_data1\n                    });\n\n                    _this.state.issuee_data_1.map(function (item) {\n                      return console.log(item);\n                    }); // console.log(x[0]);\n\n\n                    _this.setState({\n                      issuee_data_2: i_data2\n                    });\n\n                    var cert_table = _this.refs.cert_table_1;\n                    cert_table.append(\"\"); // for(var i=0;i<count;i++){\n                    //   certificate_instance.get_cert_issuer(i).then(function(issuer_data){\n                    //     var address = issuer_data[0];\n                    //     var hash = issuer_data[1]; \n                    //     var temp = \"<tr><td>\"+address+\"</td><td>\"+hash+\"</td></tr>\";\n                    //     cert_table.append(temp);\n                    //   });\n                    // }\n                  }\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onVerify =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                event.preventDefault();\n                _context5.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context5.sent;\n                storehash.methods.is_cert_in_blockchain(_this.state.cert_hash).call({\n                  from: accounts[0]\n                }, function (error, boolv) {\n                  var iscert = _this.refs.ll;\n\n                  if (boolv == true) {\n                    iscert.append(\"This certificate is in Ethereum Blockchain\");\n                    storehash.methods.get_from_cert(_this.state.cert_hash).call({\n                      from: accounts[0]\n                    }, function (error, str) {\n                      _this.setState({\n                        str1: str[0]\n                      });\n\n                      _this.setState({\n                        str2: str[1]\n                      });\n                    });\n                  } else {\n                    iscert.append(\"This certificate is not in Ethereum Blockchain\");\n                  }\n                }); // }).then(function(boolv){\n                //   var str1=$('#str1');  \n                //   if(boolv==true){\n                //     str1.append(\"This certificate is in Ethereum Blockchain\");\n                //           // var c_hash=$('#c_hash').val();\n                //     return certificate_instance.get_from_cert(c_hash,{from:App.account});\n                //   }\n                //   else{\n                //     str1.append(\"This certificate is not in Ethereum Blockchain\");      \n                //   }\n                // }).then(function(addresses){\n                //   var str2=$('#str2');  \n                //   var str3=$('#str3');  \n                //   str2.append(\"Issuer Address :\"+addresses[0]+\"</br>\");\n                //   str2.append(\"Recipient Address :\"+addresses[1]);\n                // });\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // createTable=()=>{\n    //   let table=[];\n    //   let table_issue_1 = this.state.issuee_data_1;\n    //   let table_issue_2 = this.state.issuee_data_2;\n    //   for(let i =0;i<1;i++){\n    //     let table_1 = [];\n    //     // console.log(this.state.issuee_data_1);\n    //     table_1.push(<td>{table_issue_1[i]}</td>);\n    //     table_1.push(<td>{table_issue_2[i]}</td>);\n    //     table.push(<tr>{table_1}</tr>);\n    //   }\n    // };\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Ethereum and IPFS using Infura\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"grid\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"recipient address:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"add_rec\",\n        onChange: this.recipientChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Send it\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \" Get Transaction Receipt \"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        bordered: true,\n        responsive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \" \"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Values\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"IPFS Hash stored on Ethereum\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.state.ipfsHash)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, this.state.ethAddress)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Tx # \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, this.state.transactionHash)))))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Recipient\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        id: \"accountAddress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.show_cert_2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \" Show Certificate \"), React.createElement(\"table\", {\n        ref: \"cert_table_1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.onVerify,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Enter Certificate hash:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"input\",\n        onChange: this.hashChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"Verify it\")), React.createElement(\"p\", {\n        ref: \"ll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, this.state.str1), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, this.state.str2)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/surajv/Documents/Blockchain prjct/doc_verify-master/src/App.js"],"names":["React","Component","web3","ipfs","storehash","Button","App","state","ipfsHash","buffer","ethAddress","transactionHash","txReceipt","add_rec","issuee_data_1","issuee_data_2","cert_hash","str1","str2","recipientChange","event","setState","target","value","hashChange","captureFile","stopPropagation","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","onClick","blockNumber","gasUsed","eth","getTransactionReceipt","err","console","log","onSubmit","getAccounts","accounts","options","address","add","hash","methods","issue_cert","send","error","show_cert_2","issuee_cert_cnt","call","len","parseInt","i","i_data1","i_data2","get_cert_issuee","ans","push","cert_table","refs","cert_table_1","append","map","item","onVerify","is_cert_in_blockchain","boolv","iscert","ll","get_from_cert","str"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n\nstate = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      transactionHash:'',\n      txReceipt: '',\n      add_rec:'',\n      issuee_data_1: [],\n      issuee_data_2: [],\n      cert_hash:'',\n      str1:'',\n      str2:''\n    };\n\nrecipientChange = (event) => {\n  this.setState({add_rec: event.target.value});\n}\n\nhashChange = (event) => {\n  this.setState({cert_hash: event.target.value});\n}\n//Take file input from user\ncaptureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n\n//Convert the file to buffer to store on IPFS\n convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer-using es6 syntax\n        this.setState({buffer});\n    };\n\n//ES6 async function\nonClick = async () => {\ntry{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\nawait web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        });\n      }\ncatch(error){\n      console.log(error);\n    }\n}\n\nonSubmit = async (event) => {\n      event.preventDefault();\n\n//bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n    //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n    //save document to IPFS,return its hash#, and set hash# to state\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash\n        this.setState({ ipfsHash:ipfsHash[0].hash });\n        //var add_rec= $('#add_rec').val();\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n        //return the transaction hash from the ethereum contract\n        storehash.methods.issue_cert(this.state.add_rec,this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        });\n      })\n    };\n\n    show_cert_2 = async (event) => {\n      //  App.contracts.Certificate.deployed().then(function(instance) {\n      // certificate_instance = instance;\n      // return instance.issuee_cert_cnt(App.account,{from:App.account});\n      const accounts = await web3.eth.getAccounts();\n      storehash.methods.issuee_cert_cnt(accounts[0]).call({from: accounts[0]},(error, result) => {\n        const len = parseInt(result);\n        for(let i =0;i<len;i++){\n          var i_data1=[];\n          var i_data2=[];\n        storehash.methods.get_cert_issuee(i).call({from: accounts[0]}, (error, ans) => {\n          i_data1.push(ans[0]);\n          i_data2.push(ans[1]);\n\n          var cert_table = this.refs.cert_table_1;\n          cert_table.append(\" \"+ans[0]+\" \"+ans[1]+\"   link:gateway.ipfs.io/ipfs/\"+ans[1]+\":\");\n          // console.log(i_data1[0]);\n          // console.log(i_data2[0]);\n        })\n        // console.log(i_data1);\n        this.setState({issuee_data_1:i_data1});\n        this.state.issuee_data_1.map(item=>(console.log(item)));\n        // console.log(x[0]);\n        this.setState({issuee_data_2:i_data2});\n\n        var cert_table = this.refs.cert_table_1;\n        cert_table.append(\"\");\n      // for(var i=0;i<count;i++){\n      //   certificate_instance.get_cert_issuer(i).then(function(issuer_data){\n      //     var address = issuer_data[0];\n      //     var hash = issuer_data[1]; \n      //     var temp = \"<tr><td>\"+address+\"</td><td>\"+hash+\"</td></tr>\";\n      //     cert_table.append(temp);\n      //   });\n      // }\n      }\n      });\n\n  };\n  \n  onVerify = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n    storehash.methods.is_cert_in_blockchain(this.state.cert_hash).call({from: accounts[0]}, (error, boolv) => {\n      var iscert = this.refs.ll;\n      if(boolv==true){\n        iscert.append(\"This certificate is in Ethereum Blockchain\");\n        storehash.methods.get_from_cert(this.state.cert_hash).call({from: accounts[0]}, (error, str) => {\n          this.setState({str1:str[0]});\n          this.setState({str2:str[1]});\n        });\n      }\n      else{\n        iscert.append(\"This certificate is not in Ethereum Blockchain\");\n      }\n\n    });\n    // }).then(function(boolv){\n    //   var str1=$('#str1');  \n    //   if(boolv==true){\n    //     str1.append(\"This certificate is in Ethereum Blockchain\");\n    //           // var c_hash=$('#c_hash').val();\n\n    //     return certificate_instance.get_from_cert(c_hash,{from:App.account});\n    //   }\n    //   else{\n    //     str1.append(\"This certificate is not in Ethereum Blockchain\");      \n    //   }\n    // }).then(function(addresses){\n    //   var str2=$('#str2');  \n    //   var str3=$('#str3');  \n    //   str2.append(\"Issuer Address :\"+addresses[0]+\"</br>\");\n    //   str2.append(\"Recipient Address :\"+addresses[1]);\n    // });\n  };\n// createTable=()=>{\n\n//   let table=[];\n//   let table_issue_1 = this.state.issuee_data_1;\n//   let table_issue_2 = this.state.issuee_data_2;\n//   for(let i =0;i<1;i++){\n//     let table_1 = [];\n//     // console.log(this.state.issuee_data_1);\n//     table_1.push(<td>{table_issue_1[i]}</td>);\n//     table_1.push(<td>{table_issue_2[i]}</td>);\n//     table.push(<tr>{table_1}</tr>);\n//   }\n// };\n\nrender() {\n\nreturn (\n        <div>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Ethereum and IPFS using Infura</h1>\n          </header>\n\n<hr/>\n<grid>\n          <h3> Choose file to send to IPFS </h3>\n          <form onSubmit={this.onSubmit}>\n          <label>recipient address:\n            <input\n              type = \"text\" id=\"add_rec\" onChange = {this.recipientChange}\n            />\n            </label>\n            <br></br>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Send it\n             </Button>\n          </form>\n<hr/>\n <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n <hr/>\n  <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th> </th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n<tbody>\n                  <tr>\n                    <td>IPFS Hash stored on Ethereum</td>\n                    <td> : </td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td> : </td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>Tx # </td>\n                    <td> : </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n      <div>\n          <h1>Recipient</h1>\n          <hr/>\n          <br/>\n          <p id=\"accountAddress\"></p><br/>\n            {/* <form show_cert_2={this.show_cert_2}>\n            <Button type=\"submit\">Show Certificate</Button>\n            </form> */}\n             <Button onClick = {this.show_cert_2}> Show Certificate </Button>\n             <table ref=\"cert_table_1\">\n               {/* <td>{this.state.issuee_data_1.map(item=>(<li key={item}>{item}</li>))}</td> */}\n               {/* {this.createTable()} */}\n             </table>\n             \n      </div>\n      <div>\n\n          <form onSubmit={this.onVerify}>\n          <label>Enter Certificate hash:\n            <input\n              type = \"text\" id=\"input\" onChange = {this.hashChange}\n            />\n            </label>\n            <br></br>\n            <Button\n            bsStyle=\"primary\"\n             type=\"submit\">\n             Verify it\n             </Button>\n          </form>\n          <p ref=\"ll\"></p>\n\n          <td>{this.state.str1}</td>\n          <td>{this.state.str2}</td>\n      </div>\n    </div>\n      );\n    }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}